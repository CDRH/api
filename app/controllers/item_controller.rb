=begin
CDRH API

API to access all public Center for Digital Research in the Humanities resources

OpenAPI spec version: 0.1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

class ItemController < ApplicationController

  def index
    # Expected parameters
    # q
    # f[]
    # facet[]
    # hl
    # min
    # num
    # sort
    # sort_desc
    # start

    start = params["start"].blank? ? START : params["start"]
    num = params["num"].blank? ? NUM : params["num"]
    req = {
      "from" => start,
      "size" => num,
      "query" => {}
    }
    bool = {}

    # TEXT SEARCH Q
    if !params["q"].blank?
      # default to searching text field
      # but can search _all field if necessary
      if params["q"].include?("*")
        bool["must"] = { "wildcard" => { "cdrh-text" => params["q"] } }
      else
        bool["must"] = { "match" => { "cdrh-text" => params["q"] } }
      end
    else
      bool["must"] = { "match_all" => {} }
    end

    # FILTER FIELDS F[]
    if !params["f"].blank?
      fields = params["f"]
      pairs = fields.map { |f| f.split("|") }
      filter = []
      pairs.each do |pair|
        filter << { "term" => { pair[0] => pair[1] } }
      end
      bool["filter"] = filter
      req["query"]["bool"] = bool
    end

    begin
      puts req
      res = RestClient.post("#{ES_URI}/_search", req.to_json, { "content-type" => "json" })
      body = JSON.parse(res.body)
      render json: JSON.pretty_generate(body)
    rescue => e
      puts "ERROR: #{e}"
      # TODO correctly format this for api expected results
      render json: { "error" => e }
    end
  end

  def show
    # TODO are we assuming that ids are always unique?
    # if not, we can use the shortname param passed in, also
    req = {
      "query" => {
        "ids" => {
          # "type" => params["shortname"]
          "values" => [params["id"]]
        }
      }
    }
    begin
      res = RestClient.post("#{ES_URI}/_search", req.to_json, { "content-type" => "json" })
      body = JSON.parse(res.body)
      count = body["hits"]["total"]
      # TODO this is NOT the way that we are expecting the response
      # but I'm just woodshedding it in for the moment!
      item = body["hits"]["hits"][0]["_source"]
      render json: JSON.pretty_generate({ "count" => count, "item" => item })
    rescue => e
      # TODO handle this in the open api method
      puts "ERROR: #{e}"
      render json: { "error" => e }
    end
  end
end
